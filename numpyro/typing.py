# Copyright Contributors to the Pyro project.
# SPDX-License-Identifier: Apache-2.0


from typing import Any, Protocol, runtime_checkable

from jaxtyping import ArrayLike, PRNGKeyArray

from numpyro.distributions import constraints


@runtime_checkable
class ConstraintLike(Protocol):
    is_discrete: bool = ...
    event_dim: int = ...

    def __call__(self, x: ArrayLike) -> ArrayLike: ...
    def __repr__(self) -> str: ...
    def check(self, value: ArrayLike) -> ArrayLike: ...
    def feasible_like(self, prototype: ArrayLike) -> ArrayLike: ...


@runtime_checkable
class DistributionLike(Protocol):
    """A protocol for typing distributions.

    Used to type object of type numpyro.distributions.Distribution, funsor.Funsor
    or tensorflow_probability.distributions.Distribution.
    """

    arg_constraints: dict[str, ConstraintLike] = ...
    support: ConstraintLike = ...
    has_enumerate_support: bool = ...
    reparametrized_params: list[str] = ...
    _validate_args: bool = ...
    pytree_data_fields: tuple = ...
    pytree_aux_fields: tuple = ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...

    def rsample(
        self, key: PRNGKeyArray, sample_shape: tuple[int, ...] = ()
    ) -> ArrayLike: ...
    def sample(
        self, key: PRNGKeyArray, sample_shape: tuple[int, ...] = ()
    ) -> ArrayLike: ...
    def log_prob(self, value: ArrayLike) -> ArrayLike: ...
    def cdf(self, value: ArrayLike) -> ArrayLike: ...
    def icdf(self, q: ArrayLike) -> ArrayLike: ...
    def entropy(self) -> ArrayLike: ...
    def enumerate_support(self, expand: bool = True) -> ArrayLike: ...
    def shape(self, sample_shape: tuple[int, ...] = ()) -> tuple[int, ...]: ...

    @property
    def batch_shape(self) -> tuple[int, ...]: ...
    @property
    def event_shape(self) -> tuple[int, ...]: ...
    @property
    def event_dim(self) -> int: ...
    @property
    def has_rsample(self) -> bool: ...

    @property
    def mean(self) -> ArrayLike: ...
    @property
    def variance(self) -> ArrayLike: ...

    @property
    def is_discrete(self) -> bool: ...


@runtime_checkable
class TransformLike(Protocol):
    domain = constraints.Constraint
    codomain = constraints.Constraint
    _inv: "TransformLike" = None

    def __call__(self, x: ArrayLike) -> ArrayLike: ...
    def _inverse(self, y: ArrayLike) -> ArrayLike: ...
    def log_abs_det_jacobian(
        self, x: ArrayLike, y: ArrayLike, intermediates=None
    ) -> ArrayLike: ...
    def call_with_intermediates(self, x: ArrayLike) -> tuple[ArrayLike, None]: ...
    def forward_shape(self, shape: tuple[int, ...]) -> tuple[int, ...]: ...
    def inverse_shape(self, shape: tuple[int, ...]) -> tuple[int, ...]: ...

    @property
    def inv(self) -> "TransformLike": ...
    @property
    def sign(self) -> ArrayLike: ...
